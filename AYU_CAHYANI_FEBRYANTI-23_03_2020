14. User Interface
(Zul File)

<window id="winHome" border="normal" width="320px" title="List of Pictures" apply="Controller.controller">
    <hbox>
        <vbox>
            <image id="image1" src="/image/img1.jpg" width="150px" height="250px">
            </image>
            <image id="image3" src="/image/img3.jpg" width="150px" height="250px"/>
        </vbox>
        <vbox>
            <image id="image2" src="/image/img2.jpg" width="150px" height="250px"/>
            <image id="image4" src="/image/img4.jpg" width="150px" height="250px"/>
        </vbox>
    </hbox>
    
    <toolbar mold="panel" width="300px" align="center">
        <hbox align="center"> 
            <toolbarbutton  iconSclass="z-icon-fw z-icon-chevron-left"/>
            <toolbarbutton iconSclass="z-icon-fw z-icon-circle" />
            <toolbarbutton iconSclass="z-icon-fw z-icon-square" />
        </hbox>
    </toolbar>
</window>

(Java Class)

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Controller;

import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.event.Events;
import org.zkoss.zk.ui.select.SelectorComposer;
import org.zkoss.zk.ui.select.annotation.Listen;
import org.zkoss.zk.ui.select.annotation.Wire;
import org.zkoss.zul.Image;
import org.zkoss.zul.Messagebox;
import org.zkoss.zul.Window;

/**
 *
 * @author Ayu Cahyani
 */
public class controller extends SelectorComposer<Component> {

    @Wire
    Window winHome;

    @Wire
    Image image1, image2, image3, image4;

    @Override
    public void doAfterCompose(Component comp) throws Exception {
        super.doAfterCompose(comp); //To change body of generated methods, choose Tools | Templates.
    }

    @Listen(Events.ON_CLICK + "=#image1")
    public void imageClicked() {
        ShowMessageDetail(imageDetail("1").replace("px", ""));
    }

    @Listen(Events.ON_CLICK + "=#image2")
    public void imageClicked2() {
        ShowMessageDetail(imageDetail("2").replace("px", ""));
    }

    @Listen(Events.ON_CLICK + "=#image3")
    public void imageClicked3() {
        ShowMessageDetail(imageDetail("3").replace("px", ""));
    }

    @Listen(Events.ON_CLICK + "=#image4")
    public void imageClicked4() {
        ShowMessageDetail(imageDetail("4").replace("px", ""));
    }

    public static void ShowMessageDetail(String msg) {
        String title = "Detail";
        String type = "z-messagebox-icon z-messagebox-information";
        org.zkoss.zul.Messagebox.show(msg, title, 1, type);
    }

    private String imageDetail(String code) {
        String detail1 = "This image is lyric for ";
        String detail = "";

        if (code.equals("1")) {
            detail = detail1 + " Pinochio. \nThis image size is : "
                    + image1.getWidth() + "x" + image1.getHeight();
        }
        if (code.equals("2")) {
            detail = detail1 + " LA Trains. \nThis image size is : "
                    + image1.getWidth() + "x" + image1.getHeight();
        }
        if (code.equals("3")) {
            detail = detail1 + " Otherside. \nThis image size is : "
                    + image1.getWidth() + "x" + image1.getHeight();
        }
        if (code.equals("4")) {
            detail = detail1 + " Guess Not. \nThis image size is : "
                    + image1.getWidth() + "x" + image1.getHeight();
        }
        return detail;
    }
}


15. Class Vending Machine.Java
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Controller;

import java.math.BigDecimal;
import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.event.Events;
import org.zkoss.zk.ui.select.SelectorComposer;
import org.zkoss.zk.ui.select.annotation.Listen;
import org.zkoss.zk.ui.select.annotation.Wire;
import org.zkoss.zul.Image;
import org.zkoss.zul.Messagebox;
import org.zkoss.zul.Window;

/**
 *
 * @author Ayu Cahyani
 */
public class vendingMachine extends SelectorComposer<Component> {

    private String money[] = {"2000", "5000", "10000", "20000"};
    private String drinks[] = {"Aqua", "Teh Botol", "Pocari Sweat"};
    private String price[] = {"5000", "7000", "10000"};

    @Override
    public void doAfterCompose(Component comp) throws Exception {
        super.doAfterCompose(comp); //To change body of generated methods, choose Tools | Templates.
    }

    public void transaction() {
        int inputMoneys = 0;
        for (int i = 0; i < drinks.length; i++) {
            if (stock(drinks[i]) > 0) {
                for (String inputMoney : money) {
                    if (!inputMoney.equals(money)) {
                        Messagebox.show("We can't process your payment, please check the money's nominal.");
                    } else {
                        if (inputMoney.equals(money[i])) {

                        } else if (Integer.valueOf(inputMoney) > Integer.valueOf(money[i])) {
                            int Charge = Integer.valueOf(inputMoney) - Integer.valueOf(money[i]);
                        } else if (Integer.valueOf(inputMoney) < Integer.valueOf(money[i])) {
                            Messagebox.show("We can't process your payment, please check the money's nominal.");
                        }
                    }
                }
            } else {
                Messagebox.show("Empty Stock");
            }
        }
    }

    public int stock(String code) {
        int stocks = 0;
        if (code.equals(drinks[0])) {
            stocks = 10;
        }

        if (code.equals(drinks[1])) {
            stocks = 10;
        }

        if (code.equals(drinks[2])) {
            stocks = 10;
        }

        return stocks;
    }

}
