// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Valet",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM_NAMED(NSInteger, VALAccessibility, "Accessibility", closed) {
/// Valet data can only be accessed while the device is unlocked. This attribute is recommended for data that only needs to be accessible while the application is in the foreground. Valet data with this attribute will migrate to a new device when using encrypted backups.
  VALAccessibilityWhenUnlocked = 1,
/// Valet data can only be accessed once the device has been unlocked after a restart. This attribute is recommended for data that needs to be accessible by background applications. Valet data with this attribute will migrate to a new device when using encrypted backups.
  VALAccessibilityAfterFirstUnlock = 2,
/// Valet data can always be accessed regardless of the lock state of the device. This attribute is not recommended. Valet data with this attribute will migrate to a new device when using encrypted backups.
  VALAccessibilityAlways = 3,
/// Valet data can only be accessed while the device is unlocked. This attribute is recommended for items that only need to be accessible while the application is in the foreground. Valet data with this attribute will never migrate to a new device, so these items will be missing after a backup is restored to a new device. No items can be stored in this class on devices without a passcode. Disabling the device passcode will cause all items in this class to be deleted.
  VALAccessibilityWhenPasscodeSetThisDeviceOnly = 4,
/// Valet data can only be accessed while the device is unlocked. This is recommended for data that only needs to be accessible while the application is in the foreground. Valet data with this attribute will never migrate to a new device, so these items will be missing after a backup is restored to a new device.
  VALAccessibilityWhenUnlockedThisDeviceOnly = 5,
/// Valet data can only be accessed once the device has been unlocked after a restart. This is recommended for items that need to be accessible by background applications. Valet data with this attribute will never migrate to a new device, so these items will be missing after a backup is restored to a new device.
  VALAccessibilityAfterFirstUnlockThisDeviceOnly = 6,
/// Valet data can always be accessed regardless of the lock state of the device. This option is not recommended. Valet data with this attribute will never migrate to a new device, so these items will be missing after a backup is restored to a new device.
  VALAccessibilityAlwaysThisDeviceOnly = 7,
};

typedef SWIFT_ENUM_NAMED(NSInteger, VALCloudAccessibility, "CloudAccessibility", closed) {
/// Valet data can only be accessed while the device is unlocked. This attribute is recommended for data that only needs to be accessible while the application is in the foreground. Valet data with this attribute will migrate to a new device when using encrypted backups.
  VALCloudAccessibilityWhenUnlocked = 1,
/// Valet data can only be accessed once the device has been unlocked after a restart. This attribute is recommended for data that needs to be accessible by background applications. Valet data with this attribute will migrate to a new device when using encrypted backups.
  VALCloudAccessibilityAfterFirstUnlock = 2,
/// Valet data can always be accessed regardless of the lock state of the device. This attribute is not recommended. Valet data with this attribute will migrate to a new device when using encrypted backups.
  VALCloudAccessibilityAlways = 3,
};


SWIFT_PROTOCOL_NAMED("KeychainQueryConvertible")
@protocol VALKeychainQueryConvertible
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nonnull keychainQuery;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, VALMigrationResult, "MigrationResult", closed) {
/// Migration succeeded.
  VALMigrationResultSuccess = 1,
/// Migration failed because the keychain query was not valid.
  VALMigrationResultInvalidQuery = 2,
/// Migration failed because no items to migrate were found.
  VALMigrationResultNoItemsToMigrateFound = 3,
/// Migration failed because the keychain could not be read.
  VALMigrationResultCouldNotReadKeychain = 4,
/// Migration failed because a key in the query result could not be read.
  VALMigrationResultKeyInQueryResultInvalid = 5,
/// Migration failed because some data in the query result could not be read.
  VALMigrationResultDataInQueryResultInvalid = 6,
/// Migration failed because two keys with the same value were found in the keychain.
  VALMigrationResultDuplicateKeyInQueryResult = 7,
/// Migration failed because a key in the keychain duplicates a key already managed by Valet.
  VALMigrationResultKeyInQueryResultAlreadyExistsInValet = 8,
/// Migration failed because writing to the keychain failed.
  VALMigrationResultCouldNotWriteToKeychain = 9,
/// Migration failed because removing the migrated data from the keychain failed.
  VALMigrationResultRemovalFailed = 10,
};

typedef SWIFT_ENUM_NAMED(NSInteger, VALSecureEnclaveAccessControl, "SecureEnclaveAccessControl", closed) {
/// Access to keychain elements requires user presence verification via Touch ID, Face ID, or device Passcode. Keychain elements are still accessible by Touch ID even if fingers are added or removed. Touch ID does not have to be available or enrolled.
/// version:
/// Available on iOS 8 or later, tvOS 8 or later, watchOS 2.0 or later, and macOS 10.11 or later.
  VALSecureEnclaveAccessControlUserPresence = 1,
/// Access to keychain elements requires user presence verification via Face ID, or any finger enrolled in Touch ID. Keychain elements remain accessible via Face ID or Touch ID  after faces or fingers are added or removed. Face ID must be enabled with at least one face enrolled, or Touch ID must be available and at least one finger must be enrolled.
/// version:
/// Available on iOS 9 or later, tvOS 9 or later, watchOS 2.0 or later, and macOS 10.12.1 or later.
  VALSecureEnclaveAccessControlBiometricAny = 2,
/// Access to keychain elements requires user presence verification via the face currently enrolled in Face ID, or fingers currently enrolled in Touch ID. Previously written keychain elements become inaccessible when faces or fingers are added or removed. Face ID must be enabled with at least one face enrolled, or Touch ID must be available and at least one finger must be enrolled.
/// version:
/// Available on iOS 9 or later, tvOS 9 or later, watchOS 2.0 or later, and macOS 10.12.1 or later.
  VALSecureEnclaveAccessControlBiometricCurrentSet = 3,
/// Access to keychain elements requires user presence verification via device Passcode.
/// version:
/// Available on iOS 9 or later, tvOS 9 or later, watchOS 2.0 or later, and macOS 10.11 or later.
  VALSecureEnclaveAccessControlDevicePasscode = 4,
};


/// Reads and writes keychain elements that are stored on the Secure Enclave using Accessibility attribute <code>.whenPasscodeSetThisDeviceOnly</code>. Accessing these keychain elements will require the user to confirm their presence via Touch ID, Face ID, or passcode entry. If no passcode is set on the device, accessing the keychain via a <code>SecureEnclaveValet</code> will fail. Data is removed from the Secure Enclave when the user removes a passcode from the device.
SWIFT_CLASS_NAMED("SecureEnclaveValet") SWIFT_AVAILABILITY(macos,introduced=10.11)
@interface VALSecureEnclaveValet : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly) enum VALSecureEnclaveAccessControl accessControl;
/// note:
/// Determined by writing a value to the keychain and then reading it back out. Will never prompt the user for Face ID, Touch ID, or password.
///
/// returns:
/// <code>true</code> if the keychain is accessible for reading and writing, <code>false</code> otherwise.
- (BOOL)canAccessKeychain SWIFT_WARN_UNUSED_RESULT;
/// \param object A Data value to be inserted into the keychain.
///
/// \param key A Key that can be used to retrieve the <code>object</code> from the keychain.
///
///
/// returns:
/// <code>false</code> if the keychain is not accessible.
- (BOOL)setObject:(NSData * _Nonnull)object forKey:(NSString * _Nonnull)key;
/// note:
/// Will never prompt the user for Face ID, Touch ID, or password.
/// \param key The key to look up in the keychain.
///
///
/// returns:
/// <code>true</code> if a value has been set for the given key, <code>false</code> otherwise.
- (BOOL)containsObjectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// \param string A String value to be inserted into the keychain.
///
/// \param key A Key that can be used to retrieve the <code>string</code> from the keychain.
///
///
/// returns:
/// <code>true</code> if the operation succeeded, or <code>false</code> if the keychain is not accessible.
- (BOOL)setString:(NSString * _Nonnull)string forKey:(NSString * _Nonnull)key;
/// Removes a key/object pair from the keychain.
///
/// returns:
/// <code>false</code> if the keychain is not accessible.
- (BOOL)removeObjectForKey:(NSString * _Nonnull)key;
/// Removes all key/object pairs accessible by this Valet instance from the keychain.
///
/// returns:
/// <code>false</code> if the keychain is not accessible.
- (BOOL)removeAllObjects;
/// Migrates objects matching the input query into the receiving SecureEnclaveValet instance.
/// note:
/// The keychain is not modified if a failure occurs.
/// \param query The query with which to retrieve existing keychain data via a call to SecItemCopyMatching.
///
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychain if the migration succeeds.
///
///
/// returns:
/// Whether the migration succeeded or failed.
- (enum VALMigrationResult)migrateObjectsMatchingQuery:(NSDictionary<NSString *, NSObject *> * _Nonnull)query removeOnCompletion:(BOOL)removeOnCompletion SWIFT_WARN_UNUSED_RESULT;
/// Migrates objects matching the vended keychain query into the receiving SecureEnclaveValet instance.
/// note:
/// The keychain is not modified if a failure occurs.
/// \param keychain An objects whose vended keychain query is used to retrieve existing keychain data via a call to SecItemCopyMatching.
///
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychfain if the migration succeeds.
///
///
/// returns:
/// Whether the migration succeeded or failed.
- (enum VALMigrationResult)migrateObjectsFromKeychain:(id <VALKeychainQueryConvertible> _Nonnull)keychain removeOnCompletion:(BOOL)removeOnCompletion SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_AVAILABILITY(macos,introduced=10.11)
@interface VALSecureEnclaveValet (SWIFT_EXTENSION(Valet))
/// \param identifier A non-empty string that uniquely identifies a SecureEnclaveValet.
///
///
/// returns:
/// A SecureEnclaveValet that reads/writes keychain elements with the desired flavor.
+ (VALSecureEnclaveValet * _Nullable)valetWithIdentifier:(NSString * _Nonnull)identifier accessControl:(enum VALSecureEnclaveAccessControl)accessControl SWIFT_WARN_UNUSED_RESULT;
/// \param identifier A non-empty string that must correspond with the value for keychain-access-groups in your Entitlements file.
///
///
/// returns:
/// A SecureEnclaveValet that reads/writes keychain elements that can be shared across applications written by the same development team.
+ (VALSecureEnclaveValet * _Nullable)sharedAccessGroupValetWithIdentifier:(NSString * _Nonnull)identifier accessControl:(enum VALSecureEnclaveAccessControl)accessControl SWIFT_WARN_UNUSED_RESULT;
/// \param key A Key used to retrieve the desired object from the keychain.
///
/// \param userPrompt The prompt displayed to the user in Apple’s Face ID, Touch ID, or passcode entry UI.
///
///
/// returns:
/// The data currently stored in the keychain for the provided key. Returns <code>nil</code> if no object exists in the keychain for the specified key, or if the keychain is inaccessible.
- (NSData * _Nullable)objectForKey:(NSString * _Nonnull)key userPrompt:(NSString * _Nonnull)userPrompt userCancelled:(BOOL * _Nullable)userCancelled SWIFT_WARN_UNUSED_RESULT;
/// \param key A Key used to retrieve the desired object from the keychain.
///
/// \param userPrompt The prompt displayed to the user in Apple’s Face ID, Touch ID, or passcode entry UI.
///
///
/// returns:
/// The string currently stored in the keychain for the provided key. Returns <code>nil</code> if no string exists in the keychain for the specified key, or if the keychain is inaccessible.
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)key userPrompt:(NSString * _Nonnull)userPrompt userCancelled:(BOOL * _Nullable)userCancelled SWIFT_WARN_UNUSED_RESULT;
@end


/// Reads and writes keychain elements that are stored on the Secure Enclave using Accessibility attribute <code>.whenPasscodeSetThisDeviceOnly</code>. The first access of these keychain elements will require the user to confirm their presence via Touch ID, Face ID, or passcode entry. If no passcode is set on the device, accessing the keychain via a <code>SinglePromptSecureEnclaveValet</code> will fail. Data is removed from the Secure Enclave when the user removes a passcode from the device.
SWIFT_CLASS_NAMED("SinglePromptSecureEnclaveValet") SWIFT_AVAILABILITY(macos,introduced=10.11)
@interface VALSinglePromptSecureEnclaveValet : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly) enum VALSecureEnclaveAccessControl accessControl;
/// note:
/// Determined by writing a value to the keychain and then reading it back out. Will never prompt the user for Face ID, Touch ID, or password.
///
/// returns:
/// <code>true</code> if the keychain is accessible for reading and writing, <code>false</code> otherwise.
- (BOOL)canAccessKeychain SWIFT_WARN_UNUSED_RESULT;
/// \param object A Data value to be inserted into the keychain.
///
/// \param key A Key that can be used to retrieve the <code>object</code> from the keychain.
///
///
/// returns:
/// <code>false</code> if the keychain is not accessible.
- (BOOL)setObject:(NSData * _Nonnull)object forKey:(NSString * _Nonnull)key;
/// note:
/// Will never prompt the user for Face ID, Touch ID, or password.
/// \param key The key to look up in the keychain.
///
///
/// returns:
/// <code>true</code> if a value has been set for the given key, <code>false</code> otherwise.
- (BOOL)containsObjectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// \param string A String value to be inserted into the keychain.
///
/// \param key A Key that can be used to retrieve the <code>string</code> from the keychain.
///
///
/// returns:
/// <code>true</code> if the operation succeeded, or <code>false</code> if the keychain is not accessible.
- (BOOL)setString:(NSString * _Nonnull)string forKey:(NSString * _Nonnull)key;
/// Forces a prompt for Face ID, Touch ID, or passcode entry on the next data retrieval from the Secure Enclave.
- (void)requirePromptOnNextAccess;
/// \param userPrompt The prompt displayed to the user in Apple’s Face ID, Touch ID, or passcode entry UI. If the <code>SinglePromptSecureEnclaveValet</code> has already been unlocked, no prompt will be shown.
///
///
/// returns:
/// The set of all (String) keys currently stored in this Valet instance.
- (NSSet<NSString *> * _Nonnull)allKeysWithUserPrompt:(NSString * _Nonnull)userPrompt SWIFT_WARN_UNUSED_RESULT;
/// Removes a key/object pair from the keychain.
///
/// returns:
/// <code>false</code> if the keychain is not accessible.
- (BOOL)removeObjectForKey:(NSString * _Nonnull)key;
/// Removes all key/object pairs accessible by this Valet instance from the keychain.
///
/// returns:
/// <code>false</code> if the keychain is not accessible.
- (BOOL)removeAllObjects;
/// Migrates objects matching the input query into the receiving SinglePromptSecureEnclaveValet instance.
/// note:
/// The keychain is not modified if a failure occurs.
/// \param query The query with which to retrieve existing keychain data via a call to SecItemCopyMatching.
///
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychain if the migration succeeds.
///
///
/// returns:
/// Whether the migration succeeded or failed.
- (enum VALMigrationResult)migrateObjectsMatchingQuery:(NSDictionary<NSString *, NSObject *> * _Nonnull)query removeOnCompletion:(BOOL)removeOnCompletion SWIFT_WARN_UNUSED_RESULT;
/// Migrates objects matching the vended keychain query into the receiving SinglePromptSecureEnclaveValet instance.
/// note:
/// The keychain is not modified if a failure occurs.
/// \param keychain An objects whose vended keychain query is used to retrieve existing keychain data via a call to SecItemCopyMatching.
///
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychfain if the migration succeeds.
///
///
/// returns:
/// Whether the migration succeeded or failed.
- (enum VALMigrationResult)migrateObjectsFromKeychain:(id <VALKeychainQueryConvertible> _Nonnull)keychain removeOnCompletion:(BOOL)removeOnCompletion SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_AVAILABILITY(macos,introduced=10.11)
@interface VALSinglePromptSecureEnclaveValet (SWIFT_EXTENSION(Valet))
/// \param identifier A non-empty string that uniquely identifies a SinglePromptSecureEnclaveValet.
///
///
/// returns:
/// A SinglePromptSecureEnclaveValet that reads/writes keychain elements with the desired flavor.
+ (VALSinglePromptSecureEnclaveValet * _Nullable)valetWithIdentifier:(NSString * _Nonnull)identifier accessControl:(enum VALSecureEnclaveAccessControl)accessControl SWIFT_WARN_UNUSED_RESULT;
/// \param identifier A non-empty string that must correspond with the value for keychain-access-groups in your Entitlements file.
///
///
/// returns:
/// A SinglePromptSecureEnclaveValet that reads/writes keychain elements that can be shared across applications written by the same development team.
+ (VALSinglePromptSecureEnclaveValet * _Nullable)sharedAccessGroupValetWithIdentifier:(NSString * _Nonnull)identifier accessControl:(enum VALSecureEnclaveAccessControl)accessControl SWIFT_WARN_UNUSED_RESULT;
/// \param key A Key used to retrieve the desired object from the keychain.
///
/// \param userPrompt The prompt displayed to the user in Apple’s Face ID, Touch ID, or passcode entry UI.
///
///
/// returns:
/// The data currently stored in the keychain for the provided key. Returns <code>nil</code> if no object exists in the keychain for the specified key, or if the keychain is inaccessible.
- (NSData * _Nullable)objectForKey:(NSString * _Nonnull)key userPrompt:(NSString * _Nonnull)userPrompt userCancelled:(BOOL * _Nullable)userCancelled SWIFT_WARN_UNUSED_RESULT;
/// \param key A Key used to retrieve the desired object from the keychain.
///
/// \param userPrompt The prompt displayed to the user in Apple’s Face ID, Touch ID, or passcode entry UI.
///
///
/// returns:
/// The string currently stored in the keychain for the provided key. Returns <code>nil</code> if no string exists in the keychain for the specified key, or if the keychain is inaccessible.
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)key userPrompt:(NSString * _Nonnull)userPrompt userCancelled:(BOOL * _Nullable)userCancelled SWIFT_WARN_UNUSED_RESULT;
@end


/// Reads and writes keychain elements.
SWIFT_CLASS_NAMED("Valet")
@interface VALValet : NSObject <VALKeychainQueryConvertible>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nonnull keychainQuery;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly) enum VALAccessibility accessibility;
/// note:
/// Determined by writing a value to the keychain and then reading it back out.
///
/// returns:
/// <code>true</code> if the keychain is accessible for reading and writing, <code>false</code> otherwise.
- (BOOL)canAccessKeychain SWIFT_WARN_UNUSED_RESULT;
/// \param object A Data value to be inserted into the keychain.
///
/// \param key A Key that can be used to retrieve the <code>object</code> from the keychain.
///
///
/// returns:
/// <code>false</code> if the keychain is not accessible.
- (BOOL)setObject:(NSData * _Nonnull)object forKey:(NSString * _Nonnull)key;
/// \param key A Key used to retrieve the desired object from the keychain.
///
///
/// returns:
/// The data currently stored in the keychain for the provided key. Returns <code>nil</code> if no object exists in the keychain for the specified key, or if the keychain is inaccessible.
- (NSData * _Nullable)objectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// \param key The key to look up in the keychain.
///
///
/// returns:
/// <code>true</code> if a value has been set for the given key, <code>false</code> otherwise.
- (BOOL)containsObjectForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// \param string A String value to be inserted into the keychain.
///
/// \param key A Key that can be used to retrieve the <code>string</code> from the keychain.
///
///
/// returns:
/// <code>true</code> if the operation succeeded, or <code>false</code> if the keychain is not accessible.
- (BOOL)setString:(NSString * _Nonnull)string forKey:(NSString * _Nonnull)key;
/// \param key A Key used to retrieve the desired object from the keychain.
///
///
/// returns:
/// The string currently stored in the keychain for the provided key. Returns <code>nil</code> if no string exists in the keychain for the specified key, or if the keychain is inaccessible.
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The set of all (String) keys currently stored in this Valet instance.
- (NSSet<NSString *> * _Nonnull)allKeys SWIFT_WARN_UNUSED_RESULT;
/// Removes a key/object pair from the keychain.
///
/// returns:
/// <code>false</code> if the keychain is not accessible.
- (BOOL)removeObjectForKey:(NSString * _Nonnull)key;
/// Removes all key/object pairs accessible by this Valet instance from the keychain.
///
/// returns:
/// <code>false</code> if the keychain is not accessible.
- (BOOL)removeAllObjects;
/// Migrates objects matching the input query into the receiving Valet instance.
/// note:
/// The keychain is not modified if a failure occurs.
/// \param query The query with which to retrieve existing keychain data via a call to SecItemCopyMatching.
///
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychain if the migration succeeds.
///
///
/// returns:
/// Whether the migration succeeded or failed.
- (enum VALMigrationResult)migrateObjectsMatchingQuery:(NSDictionary<NSString *, NSObject *> * _Nonnull)query removeOnCompletion:(BOOL)removeOnCompletion SWIFT_WARN_UNUSED_RESULT;
/// Migrates objects matching the vended keychain query into the receiving Valet instance.
/// note:
/// The keychain is not modified if a failure occurs.
/// \param keychain An objects whose vended keychain query is used to retrieve existing keychain data via a call to SecItemCopyMatching.
///
/// \param removeOnCompletion If <code>true</code>, the migrated data will be removed from the keychfain if the migration succeeds.
///
///
/// returns:
/// Whether the migration succeeded or failed.
- (enum VALMigrationResult)migrateObjectsFromValet:(id <VALKeychainQueryConvertible> _Nonnull)keychain removeOnCompletion:(BOOL)removeOnCompletion SWIFT_WARN_UNUSED_RESULT;
@end




@interface VALValet (SWIFT_EXTENSION(Valet))
/// \param identifier A non-empty string that uniquely identifies a Valet.
///
/// \param accessibility The desired accessibility for the Valet.
///
///
/// returns:
/// A Valet that reads/writes keychain elements with the desired accessibility.
+ (VALValet * _Nullable)valetWithIdentifier:(NSString * _Nonnull)identifier accessibility:(enum VALAccessibility)accessibility SWIFT_WARN_UNUSED_RESULT;
/// \param identifier A non-empty string that uniquely identifies a Valet.
///
/// \param accessibility The desired accessibility for the Valet.
///
///
/// returns:
/// A Valet that reads/writes iCloud-shared keychain elements with the desired accessibility.
+ (VALValet * _Nullable)iCloudValetWithIdentifier:(NSString * _Nonnull)identifier accessibility:(enum VALCloudAccessibility)accessibility SWIFT_WARN_UNUSED_RESULT;
/// \param identifier A non-empty string that must correspond with the value for keychain-access-groups in your Entitlements file.
///
/// \param accessibility The desired accessibility for the Valet.
///
///
/// returns:
/// A Valet that reads/writes keychain elements that can be shared across applications written by the same development team.
+ (VALValet * _Nullable)valetWithSharedAccessGroupIdentifier:(NSString * _Nonnull)identifier accessibility:(enum VALAccessibility)accessibility SWIFT_WARN_UNUSED_RESULT;
/// \param identifier A non-empty string that must correspond with the value for keychain-access-groups in your Entitlements file.
///
/// \param accessibility The desired accessibility for the Valet.
///
///
/// returns:
/// A Valet that reads/writes iCloud-shared keychain elements that can be shared across applications written by the same development team.
+ (VALValet * _Nullable)iCloudValetWithSharedAccessGroupIdentifier:(NSString * _Nonnull)identifier accessibility:(enum VALCloudAccessibility)accessibility SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
